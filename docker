Docker Course Overview

Take website and api then use Docker to package up these thing and run 
Docker helps to create a package of what you create locally and runs it on a any server having docker runtime env

Docker : 
1. Docker is a tool for running applications in isolated env
2. It is similar to Virtual Machine
3. Apps run in same env
4. Now everyone is adapting Docker as Standard for Software Deployment

Containers : 
These are an abstraction at app layer that packages code and dependencies together.
Multiple containers can run on same machine and share the OS Kernel with other container and each running as isolated processess in user space

Virtual Machines :
VMs are an abstraction of physical hardware turning one server to multiple servers.
THe hypervisor allows multiple VM's to run on single machine.
Each vm includes a full copy of an operating system , the application and necessary binaries and libraries - taking tens of GBs
Vm are also very slow to boot



Benefits of Docker:
1. Run container in seconds intead of min
2. Less resources results less disk space
3. Uses less memory
4. Doesn't need full OS
5. Deployment is easy

Docker Image
1. Image is a template for creating an env of your choice
2. Snapshot (Image can have different version)
3. It has everyhthng to run image OS , Code etc..

Container
1. It is a running instance of Image

To explore and download images you can try docker hub 

To download the image use 
$ docker pull nginx

To list images 
$ docker images

Running a Container from Image
$ docker run nginx:(tag)
Using the above command will not allow further commands in same terminal untill the container gets stopped

Running a Container in a Detach Mode (Run COntainer in Background)
$ docker run -d nginx:(tag)


List running container
$ docker container ls
$ docker ps
Both are for same

To stop a docker container
$ docker stop (container-id)
$ docker stop (name-of-container)

To map the local pc port to docker container port and run the container
$ docker run -d -p (local-port):(container-port) nginx:(tag)
example: docker run -d -p 8080:80 nginx:latest

Mapping multiple localhost post with container port and run container
$ docker run -d -p (local-port):(container-port) -p (local-port):(container-port) -p (local-port):(container-port) ... nginx:(tag)
example: docker run -d -p 8080:80 -p 3000:80 -p 5000:80 nginx:tag

To start a container 
$ docker start (container-id)
$ docker start (container-name)

List of container all containers
$ docker ps -a

Delete a container 
$ docker rm (container-id)
$ docker rm (container-name)

Delete all containers
$ docker rm $(docker ps -aq)

here $(docker ps -aq) 
a stands for all 
q stands to output only numeric id

The command will give all conatiners id and all of them will be deleted

To stop a running container
$ docker rm -f (container-id)

To delete all container running or stopped..
$  docker rm -f $(docker ps -aq) 

TO name a container as per our choice
$ docker run --name (name-of-container) -d -p 8080:80 nginx:latest

Sometimes docker ps shows details in a bit awkard way so to make it easy to read we use 
$ docker ps --format="ID\t{{.ID}}\nNAME\t{{.Names}}\nIMAGE\t{{.Image}}\nPORTS\t{{.Ports}}\nCOMMAND\t{{.Command}}\nCREATED\t{{.CreatedAt}}\nSTATUS\t{{.Status}}\n"

Volumes in Docker
1. Volumes allows to share files and folders between host(server/local pc) and container
2. Also volumes allows to share between containers

Suppose we have a container so now to share between container and host
1. We will create a volume inside a container
2. And if we have a file in host in that volume so that will also appear in container as well
3. It is like we create a link between a directory or a file in host and in container 
4. So if we made changes in container in that folder the changes will be visible in host and vice versa

$ docker run --name website -v /path/of/source/in/host:/path/of/target/in/container:ro  -d -p 8080:80 nginx

-v -> volume
ro -> read only container won't be able to edit or create new file inside this volume

To get inside a container or like to run a bash/terminal cmd inside a container
$ docker exec -it (name-of-container/container-id) bash


To create a volume with both read and write

$ docker run --name website -v /path/of/source/in/host:/path/of/target/in/container  -d -p 8080:80 nginx


Sharing Volumes Between Containers
Let a container named website is already running and we want to share its contents with other container 

$ docker run --name website-copy --volumes-from website -d -p 8081:80 nginx

This will create a exact copy of files from one container to another


Dockerfile :
Building our own image from creating file called DockerFile

Link for reference : https://docs.docker.com/engine/reference/builder/

1. Image is a template for creating an env of your choice
2. Snapshot
3. Has everything need to run your Apps
4. OS,Software,App Code

For creating a Dockerfile
1. Inside of root folder(folder whose all contents you need in dockerfile) create a file named Dockerfile
2. FROM nginx:latest (From refers to the base image you need can be ubuntu,nginx,mysql etc..)
3. ADD . /usr/share/nginx/html (Here . refers to all contents in current directory ADD them to /usr/share/nginx/html)
4. Now to build dockerfile 
   $ docker build --tag/-t website:(tag-name like latest) /path/of/Folder/which/consist-of/dockerfile
   If you are in the folder which consitst of dockerfile then
   $ docker build --tag/-t website:(tag-name like latest) .
   
   
Creating a .dockerignore

Sometimes we doesn't need files to be a part of image that are currently present in folder we are creating Dockerfile
For this we use the .dockerignore file

Example: .dockerignore
node_modules
app/userdata
.git
*.txt
*.config
Dockerfile


ALPINE :
ALPINE can be used to create images in docker which helps to create low size images
Most of the docker images have an alpine verison of it

For ex : docker pull node:lts-alpine
lts -> latest

Alpine tag can be different for different images

Check it on docker hub website

Can also try to use only alpine tag to fetch latest image


Getting complete information of a container
$ docker inspect (container-id/container-name)


Getting all logs of a container
$ docker logs (container-id)

Getting logs in realtime 
$ docker logs -f (container-d)


















